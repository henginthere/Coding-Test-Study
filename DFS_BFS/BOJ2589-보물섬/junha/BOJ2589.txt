import java.io.*;
import java.util.*; 

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	static int N, M;
	static char [][]arr;
	static boolean [][] visit;
	static class position{
		int x;
		int y;
		
		position(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	static Queue<position> q = new LinkedList<>();
	static int [][]d = {{-1,0},{0,1},{1,0},{0,-1}};
	static int max = Integer.MIN_VALUE;
	public static void bfs(position p) {
		int nx, ny;
		for(int i=0;i<4;i++) {
			nx = p.x + d[i][0];
			ny = p.y + d[i][1];
			
			if(arr[nx][ny] == 0 || arr[nx][ny] == 'W' || visit[nx][ny] == true)
				continue;
			
			visit[nx][ny] = true;
			q.add(new position(nx, ny));
			
		}
	}
	
	public static void main(String args[]) throws IOException {
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		arr = new char[N+2][M+2];
		
		String s;
		for(int i=1;i<=N;i++) {
			s = br.readLine();
			for(int j=1;j<=M;j++) {
				arr[i][j] = s.charAt(j-1);
			}
		}
		
		for(int i=1;i<=N;i++) {
			for(int j=1;j<=M;j++) {
				if(arr[i][j] == 'L') {
					visit = new boolean[N+2][M+2];
					visit[i][j] = true;
					q.add(new position(i,j));
					int cnt=0;
					while(!q.isEmpty()) {
						int k = q.size();
						for(int l=0;l<k;l++) {
							bfs(q.poll());
						}
						cnt++;
					}
					max = Math.max(max, cnt-1);
				}
			}
		}
		bw.write(String.valueOf(max));
		bw.flush();
		bw.close();
		br.close();
	}
}
